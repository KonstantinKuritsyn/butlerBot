"""
Butler Bot - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- üå§Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è
- üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
- ‚è∞ –†–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–≤—Ç–æ—Ä–æ–≤
- ‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 2.0 —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, 
    CallbackQueryHandler, ContextTypes, filters
)
from telegram import Update
from telegram.error import TelegramError
import datetime
import pytz
import os
import sqlite3
from dotenv import load_dotenv

from weather import WeatherService
from database import Database
from reminders import ReminderManager
from keyboard_utils import KeyboardBuilder

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIMEZONE = pytz.timezone('Europe/Moscow')
DEFAULT_WEATHER_TIME = '08:30'
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥—ã
MAX_REMINDERS = 10

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
weather_service = WeatherService()
db = Database()
reminder_manager = ReminderManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
user_states = {}

class UserState:
    NONE = "none"
    ADDING_DAILY_TASK_NAME = "adding_daily_task_name"
    ADDING_DAILY_TASK_TIME = "adding_daily_task_time"
    ADDING_ONE_TIME_TASK_NAME = "adding_one_time_task_name"
    ADDING_ONE_TIME_TASK_DATE = "adding_one_time_task_date"
    ADDING_ONE_TIME_TASK_TIME = "adding_one_time_task_time"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_user(user.id, user.username, user.first_name)
    
    welcome_message = f"""ü§ñ *–ü—Ä–∏–≤–µ—Ç, {user.first_name}!*

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –î–≤–æ—Ä–µ—Ü–∫–∏–π! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üå§Ô∏è *–ü–æ–≥–æ–¥–∞*
‚Ä¢ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:30 –ø—Ä–∏—Å—ã–ª–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é, –∫–∞–∫—É—é –æ–¥–µ–∂–¥—É –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å

üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞*
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—é –æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

‚è∞ *–†–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª

*–ö–æ–º–∞–Ω–¥—ã:*
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/add\\_daily - –¥–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–ª–æ
/add\\_reminder - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/my\\_tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–æ–∏ –¥–µ–ª–∞
/weather - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä"""
    
    await update.message.reply_text(
        welcome_message, 
        parse_mode='Markdown',
        reply_markup=KeyboardBuilder.main_menu()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*üå§Ô∏è –ü–æ–≥–æ–¥–∞:*
/weather - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É

*üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:*
/add\\_daily - –¥–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–ª–æ
/add\\_reminder - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/my\\_tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–µ–ª–∞

*‚öôÔ∏è –î—Ä—É–≥–æ–µ:*
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

*üìù –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
‚Ä¢ –ï—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–Ω–æ–≤–∞
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: —á–µ—Ä–µ–∑ —á–∞—Å ‚Üí 30 –º–∏–Ω ‚Üí 15 –º–∏–Ω ‚Üí 10 –º–∏–Ω ‚Üí 5 –º–∏–Ω
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: "–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã –≤ 22:00"
‚Ä¢ –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å –∑–∞–ª 10.08.2025 –≤ 14:00"

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ! üòä"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /weather"""
    await update.message.reply_text("üå§Ô∏è –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
    
    weather_message = weather_service.format_weather_message()
    await update.message.reply_text(weather_message, parse_mode='Markdown')

async def add_daily_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /add_daily"""
    user_id = update.effective_user.id
    user_states[user_id] = UserState.ADDING_DAILY_TASK_NAME
    
    await update.message.reply_text(
        "üìÖ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–µ–ª–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã'):",
        parse_mode='Markdown'
    )

async def add_one_time_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /add_reminder"""
    user_id = update.effective_user.id
    user_states[user_id] = UserState.ADDING_ONE_TIME_TASK_NAME
    
    await update.message.reply_text(
        "‚è∞ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å –∑–∞–ª'):",
        parse_mode='Markdown'
    )

async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /my_tasks"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    daily_tasks = db.get_user_daily_tasks(user_id)
    one_time_tasks = db.get_user_one_time_tasks(user_id)
    
    message = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"
    
    if daily_tasks:
        message += "üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞:*\n"
        for task in daily_tasks:
            message += f"‚Ä¢ {task['task_name']} - {task['time']}\n"
        message += "\n"
    
    if one_time_tasks:
        message += "‚è∞ *–†–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
        for task in one_time_tasks:
            dt = datetime.datetime.fromisoformat(task['scheduled_datetime'])
            formatted_dt = dt.strftime("%d.%m.%Y –≤ %H:%M")
            message += f"‚Ä¢ {task['task_name']} - {formatted_dt}\n"
        message += "\n"
    
    if not daily_tasks and not one_time_tasks:
        message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n\n"
        message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á!"
    
    await update.message.reply_text(
        message, 
        parse_mode='Markdown',
        reply_markup=KeyboardBuilder.tasks_menu(daily_tasks, one_time_tasks)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    text = update.message.text
    
    state = user_states.get(user_id, UserState.NONE)
    
    if state == UserState.ADDING_DAILY_TASK_NAME:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è
        context.user_data['daily_task_name'] = text
        user_states[user_id] = UserState.ADDING_DAILY_TASK_TIME
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞: '{text}'\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22:00 –∏–ª–∏ 8.30):",
            parse_mode='Markdown'
        )
    
    elif state == UserState.ADDING_DAILY_TASK_TIME:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        time_str = reminder_manager.parse_time_input(text)
        
        if not time_str:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22:00 –∏–ª–∏ 8.30):"
            )
            return
        
        task_name = context.user_data.get('daily_task_name')
        task_id = db.add_daily_task(user_id, task_name, time_str)
        
        user_states[user_id] = UserState.NONE
        context.user_data.pop('daily_task_name', None)
        
        await update.message.reply_text(
            f"‚úÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n"
            f"üìù {task_name}\n"
            f"‚è∞ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}\n\n"
            f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.main_menu()
        )
    
    elif state == UserState.ADDING_ONE_TIME_TASK_NAME:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É
        context.user_data['one_time_task_name'] = text
        user_states[user_id] = UserState.ADDING_ONE_TIME_TASK_DATE
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞: '{text}'\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.08.2025 –∏–ª–∏ 15/12/2024):",
            parse_mode='Markdown'
        )
    
    elif state == UserState.ADDING_ONE_TIME_TASK_DATE:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è
        context.user_data['one_time_task_date'] = text
        user_states[user_id] = UserState.ADDING_ONE_TIME_TASK_TIME
        
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç–∞: {text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00 –∏–ª–∏ 9.30):",
            parse_mode='Markdown'
        )
    
    elif state == UserState.ADDING_ONE_TIME_TASK_TIME:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        task_name = context.user_data.get('one_time_task_name')
        date_text = context.user_data.get('one_time_task_date')
        
        target_datetime = reminder_manager.parse_datetime_input(date_text, text)
        
        if not target_datetime:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00):"
            )
            return
        
        task_id = db.add_one_time_task(user_id, task_name, target_datetime)
        
        user_states[user_id] = UserState.NONE
        context.user_data.pop('one_time_task_name', None)
        context.user_data.pop('one_time_task_date', None)
        
        formatted_dt = target_datetime.strftime("%d.%m.%Y –≤ %H:%M")
        await update.message.reply_text(
            f"‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n"
            f"üìù {task_name}\n"
            f"üìÖ {formatted_dt}\n\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ–± —ç—Ç–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.main_menu()
        )
    
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü§î\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )

async def handle_action_callback(query, action):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ action –∫–Ω–æ–ø–æ–∫ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)"""
    user_id = query.from_user.id
    
    if action == "main_menu":
        await query.edit_message_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.main_menu()
        )
    
    elif action == "weather":
        await query.edit_message_text("üå§Ô∏è –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
        weather_message = weather_service.format_weather_message()
        await query.edit_message_text(
            weather_message, 
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.back_to_menu()
        )
    
    elif action == "my_tasks":
        daily_tasks = db.get_user_daily_tasks(user_id)
        one_time_tasks = db.get_user_one_time_tasks(user_id)
        
        message = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"
        
        if daily_tasks:
            message += "üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞:*\n"
            for task in daily_tasks:
                message += f"‚Ä¢ {task['task_name']} - {task['time']}\n"
            message += "\n"
        
        if one_time_tasks:
            message += "‚è∞ *–†–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
            for task in one_time_tasks:
                dt = datetime.datetime.fromisoformat(task['scheduled_datetime'])
                formatted_dt = dt.strftime("%d.%m.%Y –≤ %H:%M")
                message += f"‚Ä¢ {task['task_name']} - {formatted_dt}\n"
            message += "\n"
        
        if not daily_tasks and not one_time_tasks:
            message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n\n"
            message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á!"
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.tasks_menu(daily_tasks, one_time_tasks)
        )
    
    elif action == "add_daily":
        user_states[user_id] = UserState.ADDING_DAILY_TASK_NAME
        await query.edit_message_text(
            "üìÖ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–µ–ª–∞*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã'):",
            parse_mode='Markdown'
        )
    
    elif action == "add_reminder":
        user_states[user_id] = UserState.ADDING_ONE_TIME_TASK_NAME
        await query.edit_message_text(
            "‚è∞ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å –∑–∞–ª'):",
            parse_mode='Markdown'
        )
    
    elif action == "help":
        help_text = """üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*üå§Ô∏è –ü–æ–≥–æ–¥–∞:*
/weather - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É

*üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:*
/add\\_daily - –¥–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–ª–æ
/add\\_reminder - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/my\\_tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–µ–ª–∞

*‚öôÔ∏è –î—Ä—É–≥–æ–µ:*
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

*üìù –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
‚Ä¢ –ï—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–Ω–æ–≤–∞
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: —á–µ—Ä–µ–∑ —á–∞—Å ‚Üí 30 –º–∏–Ω ‚Üí 15 –º–∏–Ω ‚Üí 10 –º–∏–Ω ‚Üí 5 –º–∏–Ω
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: "–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã –≤ 22:00"
‚Ä¢ –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å –∑–∞–ª 10.08.2025 –≤ 14:00"

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ! üòä"""
        
        await query.edit_message_text(
            help_text,
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.back_to_menu()
        )
    
    elif action == "settings":
        settings = db.get_user_weather_settings(user_id)
        await query.edit_message_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ:",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.settings_menu(
                settings['notifications_enabled'],
                settings['weather_time']
            )
        )

async def handle_manage_callback(query, list_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ manage –∫–Ω–æ–ø–æ–∫ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –∑–∞–¥–∞—á)"""
    user_id = query.from_user.id
    
    if list_type == "daily_tasks":
        tasks = db.get_user_daily_tasks(user_id)
        if tasks:
            await query.edit_message_text(
                "üìÖ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
                parse_mode='Markdown',
                reply_markup=KeyboardBuilder.daily_tasks_list(tasks)
            )
        else:
            await query.edit_message_text(
                "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª.",
                parse_mode='Markdown',
                reply_markup=KeyboardBuilder.back_to_menu()
            )
    
    elif list_type == "one_time_tasks":
        tasks = db.get_user_one_time_tasks(user_id)
        if tasks:
            await query.edit_message_text(
                "‚è∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
                parse_mode='Markdown',
                reply_markup=KeyboardBuilder.one_time_tasks_list(tasks)
            )
        else:
            await query.edit_message_text(
                "‚è∞ –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                parse_mode='Markdown',
                reply_markup=KeyboardBuilder.back_to_menu()
            )

async def handle_view_task_callback(query, task_type, task_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    user_id = query.from_user.id
    
    if task_type == "daily":
        tasks = db.get_user_daily_tasks(user_id)
        task = next((t for t in tasks if t['id'] == task_id), None)
        
        if task:
            message = f"üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–ª–æ*\n\n" \
                     f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {task['task_name']}\n" \
                     f"‚è∞ *–í—Ä–µ–º—è:* {task['time']}\n" \
                     f"üìÖ *–°–æ–∑–¥–∞–Ω–æ:* {task['created_at']}"
        else:
            message = "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    elif task_type == "one_time":
        tasks = db.get_user_one_time_tasks(user_id)
        task = next((t for t in tasks if t['id'] == task_id), None)
        
        if task:
            dt = datetime.datetime.fromisoformat(task['scheduled_datetime'])
            formatted_dt = dt.strftime("%d.%m.%Y –≤ %H:%M")
            message = f"‚è∞ *–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n" \
                     f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {task['task_name']}\n" \
                     f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {formatted_dt}\n" \
                     f"üìÖ *–°–æ–∑–¥–∞–Ω–æ:* {task['created_at']}"
        else:
            message = "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    await query.edit_message_text(
        message,
        parse_mode='Markdown',
        reply_markup=KeyboardBuilder.task_detail_menu(task_id, task_type)
    )

async def handle_delete_callback(query, task_type, task_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if task_type == "daily":
        tasks = db.get_user_daily_tasks(user_id)
        task = next((t for t in tasks if t['id'] == task_id), None)
        task_name = task['task_name'] if task else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
        type_name = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–ª–æ"
    else:
        tasks = db.get_user_one_time_tasks(user_id)
        task = next((t for t in tasks if t['id'] == task_id), None)
        task_name = task['task_name'] if task else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        type_name = "—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    
    message = f"üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ*\n\n" \
             f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {type_name}?\n\n" \
             f"üìù *{task_name}*"
    
    await query.edit_message_text(
        message,
        parse_mode='Markdown',
        reply_markup=KeyboardBuilder.confirm_delete(task_id, task_type)
    )

async def handle_confirm_delete_callback(query, task_type, task_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = query.from_user.id
    
    try:
        if task_type == "daily":
            db.delete_daily_task(task_id)
            message = "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
        else:
            db.delete_one_time_task(task_id)
            message = "‚úÖ –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.back_to_menu()
        )
    
    except Exception as e:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.back_to_menu()
        )

async def handle_toggle_callback(query, setting_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = query.from_user.id
    
    if setting_type == "weather_notifications":
        new_state = db.toggle_weather_notifications(user_id)
        settings = db.get_user_weather_settings(user_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        message = f"üå§Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ {status}!"
        
        await query.edit_message_text(
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n{message}\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ:",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.settings_menu(
                settings['notifications_enabled'],
                settings['weather_time']
            )
        )

async def handle_set_callback(query, setting_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    user_id = query.from_user.id
    
    if setting_type == "weather_time":
        await query.edit_message_text(
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:*\n\n"
            "–ü–æ–≥–æ–¥–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.weather_time_menu()
        )

async def handle_set_time_callback(query, time_str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≥–æ–¥—ã"""
    user_id = query.from_user.id
    
    try:
        db.update_user_weather_time(user_id, time_str)
        settings = db.get_user_weather_settings(user_id)
        
        await query.edit_message_text(
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            f"‚úÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_str}!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ:",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.settings_menu(
                settings['notifications_enabled'],
                settings['weather_time']
            )
        )
    except Exception as e:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown',
            reply_markup=KeyboardBuilder.back_to_menu()
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    parts = data.split("|")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ action –∫–Ω–æ–ø–æ–∫ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
    if len(parts) == 2 and parts[0] == "action":
        await handle_action_callback(query, parts[1])
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ manage –∫–Ω–æ–ø–æ–∫ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –∑–∞–¥–∞—á)
    elif len(parts) == 2 and parts[0] == "manage":
        await handle_manage_callback(query, parts[1])
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ view –∫–Ω–æ–ø–æ–∫ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏)
    elif len(parts) == 2 and parts[0].startswith("view_"):
        task_type = parts[0].replace("view_", "")
        task_id = int(parts[1])
        await handle_view_task_callback(query, task_type, task_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ delete –∫–Ω–æ–ø–æ–∫
    elif len(parts) == 3 and parts[0] == "delete":
        task_type = parts[1]
        task_id = int(parts[2])
        await handle_delete_callback(query, task_type, task_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ confirm_delete –∫–Ω–æ–ø–æ–∫
    elif len(parts) == 3 and parts[0] == "confirm_delete":
        task_type = parts[1]
        task_id = int(parts[2])
        await handle_confirm_delete_callback(query, task_type, task_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –∫–Ω–æ–ø–æ–∫ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    elif len(parts) == 2 and parts[0] == "toggle":
        await handle_toggle_callback(query, parts[1])
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ set –∫–Ω–æ–ø–æ–∫ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏)
    elif len(parts) == 2 and parts[0] == "set":
        await handle_set_callback(query, parts[1])
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ set_time –∫–Ω–æ–ø–æ–∫ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    elif len(parts) == 2 and parts[0] == "set_time":
        await handle_set_time_callback(query, parts[1])
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    elif len(parts) == 4:
        try:
            action = parts[0]  # complete –∏–ª–∏ snooze
            task_type = parts[1]  # daily –∏–ª–∏ one_time
            task_id = int(parts[2])
            reminder_id = int(parts[3])
        except ValueError as e:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='Markdown'
            )
            return
        
        if action == "complete":
            # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            db.complete_reminder(reminder_id)
            
            if task_type == "one_time":
                db.complete_one_time_task(task_id)
            
            await query.edit_message_text(
                f"‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.\n\n"
                f"{query.message.text.split('üìù')[1] if 'üìù' in query.message.text else '–ó–∞–¥–∞—á–∞'}",
                parse_mode='Markdown'
            )
        
        elif action == "snooze":
            # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            next_reminder_time = reminder_manager.get_next_reminder_time(1)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1 —á–∞—Å–∞
            
            if next_reminder_time:
                db.update_reminder_history(reminder_id, next_reminder_time)
                time_str = next_reminder_time.strftime("%H:%M")
                
                await query.edit_message_text(
                    f"‚è±Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ*\n\n"
                    f"–Ø –Ω–∞–ø–æ–º–Ω—é —Å–Ω–æ–≤–∞ –≤ {time_str}",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.",
                    parse_mode='Markdown'
                )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç callback_data –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        await query.edit_message_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
            parse_mode='Markdown'
        )

async def send_weather_notification_for_time(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ"""
    current_time = datetime.datetime.now(TIMEZONE).strftime("%H:%M")
    users = db.get_users_for_weather_time(current_time)
    
    if not users:
        return
    
    weather_message = weather_service.format_weather_message()
    
    for user in users:
        try:
            greeting = get_time_greeting(current_time)
            await context.bot.send_message(
                chat_id=user['user_id'],
                text=f"{greeting}\n\n{weather_message}",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

def get_time_greeting(time_str: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    hour = int(time_str.split(':')[0])
    
    if 5 <= hour < 12:
        return "üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*"
    elif 12 <= hour < 17:
        return "‚òÄÔ∏è *–î–æ–±—Ä—ã–π –¥–µ–Ω—å!*"
    elif 17 <= hour < 22:
        return "üåÜ *–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!*"
    else:
        return "üåô *–î–æ–±—Ä–æ–π –Ω–æ—á–∏!*"

async def check_daily_tasks(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    current_time = datetime.datetime.now(TIMEZONE).strftime("%H:%M")
    tasks = db.get_tasks_for_time(current_time)
    
    for task in tasks:
        try:
            message = f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:*\n\nüìù {task['task_name']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            next_reminder = reminder_manager.get_next_reminder_time(1)
            reminder_id = db.add_reminder_history(
                task['user_id'], 'daily', task['task_id'], 
                datetime.datetime.now(), next_reminder
            )
            
            # –°–æ–∑–¥–∞–µ–º keyboard —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º reminder_id
            keyboard = reminder_manager.get_reminder_keyboard_markup(
                task['task_id'], 'daily', reminder_id
            )
            
            await context.bot.send_message(
                chat_id=task['user_id'],
                text=message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task['user_id']}: {e}")

async def check_one_time_tasks(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    current_datetime = datetime.datetime.now(TIMEZONE)
    tasks = db.get_one_time_tasks_for_time(current_datetime)
    
    for task in tasks:
        try:
            message = f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:*\n\nüìù {task['task_name']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            next_reminder = reminder_manager.get_next_reminder_time(1)
            reminder_id = db.add_reminder_history(
                task['user_id'], 'one_time', task['task_id'], 
                datetime.datetime.now(), next_reminder
            )
            
            # –°–æ–∑–¥–∞–µ–º keyboard —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º reminder_id
            keyboard = reminder_manager.get_reminder_keyboard_markup(
                task['task_id'], 'one_time', reminder_id
            )
            
            await context.bot.send_message(
                chat_id=task['user_id'],
                text=message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task['user_id']}: {e}")

async def check_pending_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    reminders = db.get_pending_reminders()
    
    for reminder in reminders:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            if reminder['task_type'] == 'daily':
                with sqlite3.connect(db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT task_name FROM daily_tasks WHERE id = ?",
                        (reminder['task_id'],)
                    )
                    result = cursor.fetchone()
                    task_name = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
            else:
                with sqlite3.connect(db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT task_name FROM one_time_tasks WHERE id = ?",
                        (reminder['task_id'],)
                    )
                    result = cursor.fetchone()
                    task_name = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = reminder_manager.format_reminder_message(
                task_name, reminder['reminder_count']
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            next_reminder = reminder_manager.get_next_reminder_time(
                reminder['reminder_count'] + 1
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            db.update_reminder_history(reminder['id'], next_reminder)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            keyboard = reminder_manager.get_reminder_keyboard_markup(
                reminder['task_id'], reminder['task_type'], reminder['id']
            )
            
            await context.bot.send_message(
                chat_id=reminder['user_id'],
                text=message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(os.environ.get('TELEGRAM_TOKEN_WISH_BOT')).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("weather", weather_command))
    app.add_handler(CommandHandler("add_daily", add_daily_task))
    app.add_handler(CommandHandler("add_reminder", add_one_time_reminder))
    app.add_handler(CommandHandler("my_tasks", my_tasks))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    job_queue = app.job_queue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue.run_repeating(
        send_weather_notification_for_time,
        interval=60,
        name="weather_notifications"
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue.run_repeating(
        check_daily_tasks,
        interval=60,
        name="check_daily_tasks"
    )
    
    job_queue.run_repeating(
        check_one_time_tasks,
        interval=60,
        name="check_one_time_tasks"
    )
    
    job_queue.run_repeating(
        check_pending_reminders,
        interval=60,
        name="check_pending_reminders"
    )
    
    print("ü§ñ Butler Bot –∑–∞–ø—É—â–µ–Ω...")
    print("üå§Ô∏è –ü–æ–≥–æ–¥–∞: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")
    print("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
    print("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
    print("‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    app.run_polling()

if __name__ == '__main__':
    main()
