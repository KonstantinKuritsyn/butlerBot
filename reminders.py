"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
"""
import datetime
from typing import Optional

class ReminderManager:
    def __init__(self):
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö: —á–∞—Å, –ø–æ–ª—á–∞—Å–∞, 15 –º–∏–Ω—É—Ç, 10 –º–∏–Ω—É—Ç, 5 –º–∏–Ω—É—Ç
        self.reminder_intervals = [60, 30, 15, 10, 5]
    
    def get_next_reminder_time(self, reminder_count: int) -> Optional[datetime.datetime]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if reminder_count <= 0:
            return None
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if reminder_count <= len(self.reminder_intervals):
            interval_minutes = self.reminder_intervals[reminder_count - 1]
        else:
            # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            interval_minutes = 5
        
        # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if reminder_count >= 10:
            return None
            
        return datetime.datetime.now() + datetime.timedelta(minutes=interval_minutes)
    
    def format_reminder_message(self, task_name: str, reminder_count: int, 
                               task_type: str = "task") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        
        if reminder_count == 1:
            prefix = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:"
        elif reminder_count <= 3:
            prefix = f"‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({reminder_count}):"
        else:
            prefix = f"üîî –°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({reminder_count}):"
        
        message = f"{prefix}\n\nüìù {task_name}"
        
        if reminder_count >= 5:
            message += f"\n\n‚ùó –≠—Ç–æ —É–∂–µ {reminder_count}-–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"
        
        return message
    
    def get_reminder_keyboard_markup(self, task_id: int, task_type: str, reminder_id: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –£–∂–µ —Å–¥–µ–ª–∞–ª", 
                    callback_data=f"complete|{task_type}|{task_id}|{reminder_id}"
                ),
                InlineKeyboardButton(
                    "‚è±Ô∏è –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", 
                    callback_data=f"snooze|{task_type}|{task_id}|{reminder_id}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    def format_task_time(self, time_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if ":" in time_str:
                hour, minute = time_str.split(":")
                return f"{hour:0>2}:{minute:0>2}"
            return time_str
        except:
            return time_str
    
    def parse_time_input(self, time_input: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            time_input = time_input.strip()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏–µ
            time_input = time_input.replace(".", ":")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            if ":" in time_input:
                parts = time_input.split(":")
                if len(parts) == 2:
                    hour = int(parts[0])
                    minute = int(parts[1])
                else:
                    return None
            else:
                # –¢–æ–ª—å–∫–æ —á–∞—Å
                hour = int(time_input)
                minute = 0
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                return f"{hour:02d}:{minute:02d}"
            
            return None
            
        except (ValueError, IndexError):
            return None
    
    def parse_datetime_input(self, date_input: str, time_input: str) -> Optional[datetime.datetime]:
        """–ü–∞—Ä—Å–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            time_str = self.parse_time_input(time_input)
            if not time_str:
                return None
            
            hour, minute = map(int, time_str.split(":"))
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            date_input = date_input.strip()
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
            date_formats = [
                "%d.%m.%Y",    # 10.08.2025
                "%d/%m/%Y",    # 10/08/2025
                "%d-%m-%Y",    # 10-08-2025
                "%d.%m.%y",    # 10.08.25
                "%d/%m/%y",    # 10/08/25
                "%d-%m-%y",    # 10-08-25
            ]
            
            target_date = None
            for date_format in date_formats:
                try:
                    target_date = datetime.datetime.strptime(date_input, date_format).date()
                    break
                except ValueError:
                    continue
            
            if not target_date:
                return None
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
            target_datetime = datetime.datetime.combine(
                target_date, 
                datetime.time(hour, minute)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            if target_datetime <= datetime.datetime.now():
                return None
                
            return target_datetime
            
        except Exception:
            return None
